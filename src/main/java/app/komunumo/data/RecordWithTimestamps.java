/*
 * Komunumo - Open Source Community Manager
 * Copyright (C) Marcus Fihlon and the individual contributors to Komunumo.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package app.komunumo.data;

import jakarta.validation.constraints.NotNull;
import org.jooq.exception.DataAccessException;
import org.jooq.exception.DataChangedException;

import java.time.ZonedDateTime;
import java.util.UUID;

/**
 * <p>Represents a database record that includes a unique identifier
 * and timestamp metadata for creation and last update.</p>
 *
 * <p>Implementations of this interface are typically generated by jOOQ
 * and provide both field accessors and persistence methods. The Komunumo
 * application uses this abstraction to ensure consistent handling of
 * entity metadata such as {@code id}, {@code created}, and {@code updated}
 * across all relevant database tables.</p>
 *
 * <p>All timestamps are expected to be stored in UTC.</p>
 */
public interface RecordWithTimestamps {

    /**
     * <p>Sets the unique identifier for this record.</p>
     *
     * @param value the UUID to assign
     */
    void setId(@NotNull UUID value);

    /**
     * <p>Returns the unique identifier of this record.</p>
     *
     * @return the record's UUID, never {@code null}
     */
    @NotNull UUID getId();

    /**
     * <p>Sets the creation timestamp for this record.</p>
     *
     * @param value the {@link ZonedDateTime} when the record was created
     */
    void setCreated(@NotNull ZonedDateTime value);

    /**
     * <p>Returns the creation timestamp of this record.</p>
     *
     * @return the timestamp of creation, never {@code null}
     */
    @NotNull ZonedDateTime getCreated();

    /**
     * <p>Sets the last update timestamp for this record.</p>
     *
     * @param value the {@link ZonedDateTime} of the last update
     */
    void setUpdated(@NotNull ZonedDateTime value);

    /**
     * <p>Returns the last update timestamp of this record.</p>
     *
     * @return the timestamp of the last modification, never {@code null}
     */
    @NotNull ZonedDateTime getUpdated();


    /**
     * <p>Populates this record with values from another object,
     * typically a data transfer object or another jOOQ record.</p>
     *
     * @param source the source object from which to copy field values
     */
    void from(@NotNull Object source);


    /**
     * <p>Converts this record into another object type.</p>
     *
     * @param type the target class type to convert into
     * @param <T>  the type of the resulting object
     * @return an instance of the specified target type containing
     *         the field values from this record
     */
    <T> T into(@NotNull Class<? extends T> type);

    /**
     * <p>Stores the current record in the database, performing an insert
     * or update as appropriate.</p>
     *
     * @return the number of affected database rows
     * @throws DataAccessException   if a database access error occurs
     * @throws DataChangedException  if the record was changed concurrently
     */
    int store() throws DataAccessException, DataChangedException;

}
